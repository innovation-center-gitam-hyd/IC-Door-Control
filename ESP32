#include <WiFi.h>
#include <WiFiClient.h>
#include <ThingSpeak.h>

// Set password to "" for open networks.
char ssid[] = "GITAM";
char pass[] = "Gitam$$123";

// ThingSpeak settings
unsigned long myChannelNumber = 2598588;
const char* myReadAPIKey = "131739YUHT0R3WPK"; // Use for reading commands
const char* myWriteAPIKey = "Y1PUGG5JM40SD1BZ"; // Use for updating status

// Pin connected to the relay controlling the solenoid
int relayPin = 13;

WiFiClient client;

void setup()
{
  // Debug console
  Serial.begin(115200);

  // Initialize the relay pin as an output
  pinMode(relayPin, OUTPUT);

  // Connect to WiFi
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize ThingSpeak
  ThingSpeak.begin(client);
}

void loop()
{
  if (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.print("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
  }

  // Check if there are new commands from ThingSpeak
  int command = ThingSpeak.readIntField(myChannelNumber, 2, myReadAPIKey); // Assume field2 is used for commands

  if (command != ThingSpeakError::SUCCESS) {
    Serial.println("Failed to read command from ThingSpeak.");
    delay(20000); // Wait before trying again
    return;
  }

  // Process the command
  if (command == 1) {
    // Activate the relay to lock the door
    digitalWrite(relayPin, HIGH);
    Serial.println("Door locked.");
  } else if (command == 0) {
    // Deactivate the relay to unlock the door
    digitalWrite(relayPin, LOW);
    Serial.println("Door unlocked.");
  } else {
    Serial.println("Invalid command received.");
  }

  // Update the status to ThingSpeak
  int relayState = digitalRead(relayPin);
  ThingSpeak.setField(1, relayState); // Assume field1 is used for relay state

  int httpCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (httpCode == 200) {
    Serial.println("Channel update successful.");
  } else {
    Serial.println("Problem updating channel. HTTP error code " + String(httpCode));
  }

  // Wait before checking for new commands
  delay(20000);
}
